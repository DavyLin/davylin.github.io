<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[枫中畅游]]></title>
  <link href="http://davylin.github.io/atom.xml" rel="self"/>
  <link href="http://davylin.github.io/"/>
  <updated>2014-07-18T16:20:55+08:00</updated>
  <id>http://davylin.github.io/</id>
  <author>
    <name><![CDATA[Davy Lin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A store]]></title>
    <link href="http://davylin.github.io/blog/a-store/"/>
    <updated>2014-07-18T16:09:20+08:00</updated>
    <id>http://davylin.github.io/blog/a-store</id>
    <content type="html"><![CDATA[<p><strong><em>&mdash;来源于互联网的小故事，虽然可能是某些人丰富想象力的创作，但我觉得挺有意思的，在这里做个记录</em></strong></p>

<p><strong><code>25岁毕业</code></strong>，拿一万块钱月薪</p>

<p><strong><code>30岁</code></strong>，涨到一万五，期间无女盆友，吃10块钱盖饭，跟同学合租，挤2块钱地铁上下班，存钱25万</p>

<p><strong><code>31岁</code></strong>，啃老找父母要了35万块钱，买了50平米老房子一处，贷款90万，20年，月供6500。
<strong><code>35岁0个月</code></strong>，认识一4分木耳，接盘玩腻的木耳结婚。</p>

<p><strong><code>35岁6个月</code></strong>，生了小孩，小孩眉宇间有高富帅的痕迹</p>

<p><strong><code>36岁</code></strong>，工资涨到2万，木耳要买驴牌，便宜儿子要喝进口奶粉，压力很大</p>

<p><strong><code>37岁</code></strong>，木耳说，人家的儿子都读花家地，读史家胡同，你也要给咱高富帅的儿子搞个学区房，你这个死没用的东西</p>

<p><strong><code>38岁</code></strong>，再次啃老，七大姑八大姨全家动员，卖掉老房再购买中关村二小学区房一个，债务200万（假设楼市稳定）</p>

<p><strong><code>42岁</code></strong>，孩子上学，在学校老师门口跪了一晚后，缴纳20w择校费后将孩子编入差班。早上回家给木耳和高富帅的孩子做好早餐，木耳起来就骂没用，罚起半年不许同房。</p>

<p><strong><code>44岁</code></strong>，经济危机，公司裁员，N+2将其裁掉。与此同时，高富帅的公司成功上市。满是爱的高富帅对木耳表示，愿意对孩子负责任，木耳内流满面，连夜抱着孩子奔向高富帅。</p>

<p><strong><code>45岁</code></strong>，技术更新换代太快，他招不到工作，贷款断供，房子被收走，在蓟门桥底下搭了一个窝棚，每天到母校的泔水桶里找点新鲜吃的。</p>

<p><strong><code>46岁</code></strong>，父母发现真相，不能接受打击，双双去世。高富帅侧面了解到情况，悄悄出钱火花安葬了他父母。高富帅说，好歹也是睡过一个木耳的，也算是缘分。</p>

<p><strong><code>47岁</code></strong>，西土城公园内被gay流浪汉爆菊花，他居然感觉有些high，他感觉很羞耻。而后与他们建立起长期友好的合作关系，还主动帮他们带去北邮泔水。</p>

<p><strong><code>48岁</code></strong>，与他同时毕业了去了农行总行，国务院办公厅，建行软开等体制内单位的大稳拿领导们在北京饭店开同学会，吃山珍海味喝茅台飞天，酒足饭饱之后，言语中谈到了当年编程很好，poj连刷300题的大牛XXX，不知道他们去哪了。大家纷纷表示不知道，或许是出国了吧，然后又纵情于声色犬马中。</p>

<p><strong><code>49岁</code></strong>，他突然发现遛鸟很好玩，于是经常在西门外的天桥上遛鸟，吓唬北邮小学妹。北邮小学妹轻蔑的盯了他胯下一眼，说这么小还好意思来炫，但他依然觉得很high。</p>

<p><strong><code>50岁</code></strong>，他发现自己身体免疫力越来越差。他隐隐约约记得自己高中学过的HIV病毒。不过他很淡然，一只蛆虫用在乎自己生什么病吗？</p>

<p><strong><code>51岁</code></strong>的一天，在路边看到自己养了若干年的高富帅的儿子搂着北邮的漂亮的小学妹正要坐进豪车里，他感觉自己大期将至，摇摇晃晃的朝高富帅的儿子走去。</p>

<p>北邮漂亮小学妹说，欧巴，就是这个死gay变态遛鸟的，吓死人了啦。高富帅的儿子听着就火大，充满正义感的上去就一脚，然后把鞋扔了，光脚回到车上，北邮漂亮小学妹说，欧巴，你好有正义感哦，帅呆了，走我们快去啪啪啪了啦他躺在地上，看着豪车远去的背影，缓缓的闭上了眼睛，这充满故事的一生，如同电影胶片一般在他脑海里回放。这一切，都从他在某体制外的offer上签下名字开始。</p>

<p>而那一边，一个<strong><code>25岁</code></strong>的研究生少年，正拿着高薪互联网的offer，意气风发的走出学校，怀着对未来生活的向往，走向了中关村/西二旗/上地/五道口的某栋大楼。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This is life]]></title>
    <link href="http://davylin.github.io/blog/this-is-life/"/>
    <updated>2014-07-17T09:52:19+08:00</updated>
    <id>http://davylin.github.io/blog/this-is-life</id>
    <content type="html"><![CDATA[<p>上周经历了一次沉重的心路历程，也许是我内心不够强大，也许是每个人遇到相同的问题都会如此反应。不过总的来说是有惊无险，心也就慢慢释然了。同事们都感觉到我的变化，从一个性格相对开朗到如突然间默不做声，大家都表现出对我的关心，但我却无法告诉他们自己的想法！虽然内心比较痛苦，但却充满着温暖，慢慢在安慰着自己。</p>

<p>好了，上面的事情就此告一段落了。这阶段，外甥女的入学也搞定了，参加技术培训也完成了，经理人培训也结束了，工作在稳步进行中。总体来看，算是过到了一个平稳期。在工作上，我还想有更好的突破，昨天领导找我了，说今年加薪恐怕不太理想，公司在控制成本。。感觉整个部门都充满着困难和危机。今天离职的兄弟都走了7个了，却只进来两个没多少经验的新人。哎，替部门，替公司担忧！</p>

<p>我只能做的是，对自己的生活，工作负责，做<strong><code>最好的自己</code></strong>！</p>

<p>人生也许就是到处充满着危机和变化，我们需要随时保持迎接挑战和困难的心态，不要到困难真正来临时手足无措！技术需要锻炼，沟通需要常练，而人生却是时时刻刻都在历练着。。</p>

<p>我们都需要学会坦然面对一切！</p>

<p>珍惜<strong><code>眼前的人</code></strong>，<strong><code>眼前的事</code></strong>，把握<strong><code>眼前这时刻</code></strong>！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[M1 professional training]]></title>
    <link href="http://davylin.github.io/blog/m1-professional-training/"/>
    <updated>2014-06-19T22:36:50+08:00</updated>
    <id>http://davylin.github.io/blog/m1-professional-training</id>
    <content type="html"><![CDATA[<p>昨天过来南京参加公司级的M1经理人培训，希望借此机会，了解公司管理人的发展计划以及职业管理的知识和技能。昨天一过来，向同学了解了南京的相关景点后，就匆忙赶完传说中的夫子庙。</p>

<p><strong><code>夫子庙</code></strong>，5A级景区，不知道其他地方的人评价如何，我真没发现有什么特别好的地方。只不过是比我们那边的古建筑规模大了点。传说的秦淮河畔，真心感觉不出什么，也许是我的文化底蕴不够吧：）
培训虽然累点，总算还是有点收获的，还要坚持两天。但是今天发生了一件事，让我心碎啊。老婆送给我的天梭表在培训快结束的时候，跟同事的手碰到一起了，镜面破了。。当时我想到的是，完了，回去要挨骂了。</p>

<p>晚上又补老姐打来的电话给烦到了，脾气顿时爆发了，再也忍不住了。是气自己的不小心，也是气老姐的不努力，现在外甥女的入学还是个未知数。。真是超级郁闷啊。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Axis、XFire、CXF的Webservice客户端]]></title>
    <link href="http://davylin.github.io/blog/ji-yu-axis%2C-xfire%2C-cxfde-webserviceke-hu-duan/"/>
    <updated>2014-05-27T14:59:03+08:00</updated>
    <id>http://davylin.github.io/blog/ji-yu-axis,-xfire,-cxfde-webserviceke-hu-duan</id>
    <content type="html"><![CDATA[<h2>Axis客户端调用 webservice</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>URL endpointURL = new URL("http://localhost:8080/webservice/HelloService");  
</span><span class='line'>            String requestText = "javalinjx"  
</span><span class='line'>            Service service = new Service();  
</span><span class='line'>            Call call = (Call) service.createCall();  
</span><span class='line'>            call.setTargetEndpointAddress(endpointURL);  
</span><span class='line'>            call.setOperationName("sayHello");  
</span><span class='line'>            call.addParameter("xml", XMLType.XSD_STRING, ParameterMode.IN);  
</span><span class='line'>            call.setReturnClass(String.class);  
</span><span class='line'>            call.setReturnType(XMLType.XSD_STRING);// 设置返回类型  
</span><span class='line'>            Object [] obj = new Object[]{ requestText };  
</span><span class='line'>            String result = (String) call.invoke(obj);</span></code></pre></td></tr></table></div></figure>


<h2>XFire客户端调用</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void call() throws Exception {  
</span><span class='line'>        Service service = new ObjectServiceFactory().create(HelloService.class);  
</span><span class='line'>        XFireProxyFactory factory = new XFireProxyFactory(XFireFactory.newInstance().getXFire());  
</span><span class='line'>        String url = "http://localhost:8080/webservice/HelloService";  
</span><span class='line'>        SmsService it = (SmsService)factory.create(service, url);  
</span><span class='line'>        int b = it.sayHello("javalinjx");  
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<h2>CXF客户端调用</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>JaxWsProxyFactoryBean factory1 = new JaxWsProxyFactoryBean();  
</span><span class='line'>factory1.setServiceClass(UaAuthInterfaces.class);  
</span><span class='line'>        factory1.setAddress("http://localhost:8080/webservices/HelloService");  
</span><span class='line'>        UaAuthInterfaces u = (UaAuthInterfaces) factory1.create();  
</span><span class='line'>                u.sayHello("javalinjx");</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grep and find]]></title>
    <link href="http://davylin.github.io/blog/grep-and-find/"/>
    <updated>2014-05-25T17:54:49+08:00</updated>
    <id>http://davylin.github.io/blog/grep-and-find</id>
    <content type="html"><![CDATA[<h2>grep</h2>

<h3>1.从文件中查找关键词</h3>

<p><strong>grep &lsquo;linux&rsquo; text.txt //查找包含 linux的关键词</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost ~]# grep 'root' /etc/group
</span><span class='line'>root:x:0:root
</span><span class='line'>bin:x:1:root,bin,daemon</span></code></pre></td></tr></table></div></figure>


<h3>2.从多个文件中查找关键词</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost ~]# grep 'root' /etc/group /etc/my.cnf
</span><span class='line'>/etc/group:root:x:0:root
</span><span class='line'>/etc/my.cnf:user = root</span></code></pre></td></tr></table></div></figure>


<h3>3.查找当前目录下以及下辖子目录下所有包含str字符串的文件,会列出文件名.以及该行的内容.以及行号</h3>

<p><strong>-n是打印行号，-r是在子目录也要查询</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep -n "str" -r ./</span></code></pre></td></tr></table></div></figure>


<p><strong>用 -i 搜索的时候可以忽略大小写</strong></p>

<p><strong>利用 -r 来完成所有的子目录下面执行相应的查找</strong></p>

<p><strong>用-l是打印所有的结果</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep -ril 'str' ./</span></code></pre></td></tr></table></div></figure>


<h2>find 是查找文件的常用命令</h2>

<h3>1.查找在 /etc 目录下所有文件名中含有 mail 的文件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost ]# find /etc/ -name '*mail*'
</span><span class='line'>/etc/mail.rc
</span><span class='line'>/etc/rc.d/rc5.d/K30sendmail
</span><span class='line'>/etc/rc.d/rc4.d/K30sendmail</span></code></pre></td></tr></table></div></figure>


<h3>2.查找文件大小超过指定值的文件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost ]# find ./ -type f -size +100M
</span><span class='line'>./test.sql</span></code></pre></td></tr></table></div></figure>


<h3>3.最近几天被修改过的文件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find . -mtime -2 </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CountDownLatch]]></title>
    <link href="http://davylin.github.io/blog/countdownlatch/"/>
    <updated>2014-05-10T15:29:21+08:00</updated>
    <id>http://davylin.github.io/blog/countdownlatch</id>
    <content type="html"><![CDATA[<h3>同步工具类之闭锁-CountDownLatch</h3>

<p><em>闭锁</em>是一种同步工具类，可以延迟线程的进度直到其到达终止状态。闭锁的作用相当于一扇门：在闭锁到达结束状态之前，这扇门一直是关闭的，并且没有
任何线程能通过，当到达结束状态时，这扇门会打开并允许所有的线程通过。当闭锁到达结束状态后，将不会再改变状态，因此这扇门将永远保持打开状态。
闭锁可以用来确保某些活动直到其他活动都完成后才继续执行。</p>

<p><strong><code>CountDownLatch</code></strong>是一种灵活的闭锁实现，可以在上述各种情况中使用，它可以使一个或多个线程等待一组事件发生。闭锁状态包括一个计数器，该计数器
被初始化为一个正数，表示需要等待的事件数量。<code>countDown</code>方法递减计数器，表示有一个事件已经发生了，而await方法等待计数器达到零，这表示所有
需要等待的事件都已经发生。如果计数器的值非零，那么<code>await</code>会一直阻塞直到计数器为零，或者等待中的线程中断，或者等待超时。</p>

<pre><code>public class TestHarness {  
    public long timeTasks(int nthreads, final Runnable task) throws InterruptedException {  
        final CountDownLatch startGate = new CountDownLatch(1);  
        final CountDownLatch endGate = new CountDownLatch(nthreads);  

        for (int i = 0; i &lt; nthreads; i++) {  
        Thread t = new Thread(){  
            @Override  
            public void run() {  
                try{  
                    startGate.await();  
                    try{  
                        task.run();  
                    }finally {  
                        endGate.countDown();  
                    }  
                } catch (InterruptedException ignored) {}  
            }  
        };  
        t.start();  
        }  

        long start = System.nanoTime();  
        startGate.countDown();  
        endGate.await();  
        long end = System.nanoTime();  
        return end-start;  
    }  
}  
</code></pre>

<p><code>startGate</code>计数器的初始值为1，而<code>endGate</code>计数器的初始值为工作线程的数量。每个工作线程首先要做的就是在startGate上等待，从而确保所有线程都就绪后
才开始执行。而每个线程要做的最后一件事情是将调用<code>endGate</code>的<code>countDown</code>方法减1，这能使主线程高效地等待直到所有工作线程都执行完成，因此可以更准确
地统计所消耗的时间</p>

<p><strong>ps. 为什么要在上例中使用闭锁，而不是在线程创建后就立即启动？或许，我们希望测试n个线程并发执行某个任务时需要的时间。如果在创建线程后立即启动
它们，那么先启动的线程将“领先”后启动的线程，并且活跃线程数量会随着时间的推移而增加或减少，竞争程度也在不断发生变化。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A note of Understanding the JVM]]></title>
    <link href="http://davylin.github.io/blog/a-note-of-understanding-the-jvm/"/>
    <updated>2014-04-11T13:05:48+08:00</updated>
    <id>http://davylin.github.io/blog/a-note-of-understanding-the-jvm</id>
    <content type="html"><![CDATA[<hr />

<h2>java内存区域和内存溢出异常</h2>

<h3>运行时数据区域</h3>

<ul>
<li>程序计数器（Program Counter Register）</li>
<li>Java虚拟机栈（Java Virtual Machine Stacks）</li>
<li>本地方法栈（Native Method Stacks）</li>
<li>Java堆（Java Heap）</li>
<li>方法区（Method Area）

<ul>
<li>运行时常量池（Runtime Constant Pool）</li>
</ul>
</li>
<li>另：直接内存</li>
</ul>


<hr />

<h3>程序计数器</h3>

<p>程序计数器是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等都需要它来完成。java虚拟机的多线程切换后需要恢复到正确的执行位置都需要一个独立的程序计数器，各线程之间的计数器互不影响，独立存储，所以这类内存区域为“线程私有”的内存。
如果线程正在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>

<h3>Java虚拟机栈</h3>

<p>与程序计数器一样，java虚拟机栈也是线程私有的，它的生命周期与线程相同。它描述的是java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧(Stack Frame)用于存储局部变量表、操作栈、动态链接、方法出口等信息。
经常有人把java内存区分为堆内存(heap)和栈内存(stack)，这种分法比较粗糙.而所指的&#8221;栈&#8221;就是现在讲的虚拟机栈，或者说是虚拟机栈中的局部变量表部分。
局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象超始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。
在java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展，当扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。</p>

<h3>本地方法栈</h3>

<p>本地方法栈与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。同理，本地方法栈也会招聘StackOverflowError和OutOfMemoryError异常。</p>

<h3>Java堆</h3>

<p>java堆是java虚拟机所管理的内存中最大的一块。java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。
所有的对象实例以及数据都要在堆上分配，但是随着jit编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。
java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”（Garbage Collected Heap）.如果从内存回收的角度看，现在收集器基本都是采用分代收集算法，所以java堆中还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。当然Java堆中的内存分配不够时，将会抛出常见的OutOfMemoryError异常。</p>

<h3>方法区</h3>

<p>方法区(Method Area)与java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目前应该是与java堆区分开来。
根据java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</p>

<ul>
<li><p>运行时常量池</p>

<p>  运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant pool Table）,用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。
运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，java语言并不要求常量一定只能在编译期产生，也就是并非预置入class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern()方法。自然，常量池无法申请到内存时也会抛出OutOfMemoryError异常。</p></li>
</ul>


<h3>对象访问</h3>

<h4>主流的访问有两种：使用句柄和直接指针</h4>

<p>1.如果使用句柄访问方式，java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息。</p>

<p>2.如果使用直接指针访问方式，java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference中直接存储的就是对象地址。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first octopress blog]]></title>
    <link href="http://davylin.github.io/blog/my-first-octopress-blog/"/>
    <updated>2014-04-09T15:04:27+08:00</updated>
    <id>http://davylin.github.io/blog/my-first-octopress-blog</id>
    <content type="html"><![CDATA[<h3>&mdash;Setting up this blog</h3>

<p>Apparently I&rsquo;m using <a href="http://octopress.org/"><code>Octopress</code></a>to power this blog.Many thanks for the nice framework that save me a lot of time to get up to speed.I probably wouldn&rsquo;t have decided to move my blog here in the first place if there weren&rsquo;t ready-to-use solutions for lazy people like me.</p>

<p>Anyway, here’s the link to my old blog: <a href="http://javalinjx.iteye.com/">http://javalinjx.iteye.com/</a></p>
]]></content>
  </entry>
  
</feed>

#+TITLE: Kinhung Lam ∴ A Weblog

* [[file:2022-12-03 My reading history in 2022.org][2022年阅读历史]]
#+begin_published
Saturday, December  3, 2022 at  9:20 PM CST
#+end_published
晚上看了 吴鲁加老师的 [[https://mp.weixin.qq.com/s/L6jw60lqdLqMCeDwKMfP8g][2021好书推荐]] ，就想着也可以记录下，于是就有了这篇文章哈。

2022年快过去了，想来今年也看了几本书，可以在这做个小结吧。近几年都比较少写年末总结，说来惭愧，每年年初的目标基本上没有完成。

近来我看的书，基本上包括了编程、投资、社科、教育等，我看得比较慢，所以每年基本上都只有几本。

** 工作相关：

《深入实践Spring Boot》

《Java 并发编程实践》，重读

《Java 并发编程艺术》，重读

《Python 核心编程》

《Activiti 实战》

《数据中台架构-企业》

《Learn GNU Emacs》

《计算机程序的构造与解释》

《黑客与画家》

《Build web application with Golang》

《Programming Clojure》

《Clojure Programming》

《白话区块链》

《深入理解 Java 虚拟机》，重读新版

《算法》

《代码未来》

《Rust 权限指南》

** 投资：

《投资最重要的事》

《文明、现代化、价值投资与中国》，第三遍重读

《股票大作手回忆录》

《黑天鹅》

《随机漫步的傻瓜》

《异类：不一样的成功启示录》

《指数基金投资指南》

** 社科文学：

《枪炮、病菌与钢铁》

《置身事内：中国政府与经济发展》

《底层逻辑》

** 经济：

《宏观经济通识课》

#+begin_morelink
[[file:2022-12-03 My reading history in 2022.org][Read More →]]
#+end_morelink

-----
* [[file:2017-02-04-2016-personal-summary.org][Looking back on 2016 and looking forward to 2017]]
#+begin_published
Saturday, February  4, 2017 at 11:02 AM CST
#+end_published
转眼一年又过去了！大家都很早写好总结和展望了，可是我迟迟未动手，只因为我比较懒。。

回顾 2016，哈哈！

*** 当然也实现了一些小目标：
:PROPERTIES:
:CUSTOM_ID: 当然也实现了一些小目标
:END:
跑了一个半程马拉松，虽然是第一次，但还是成功完赛，并取得了一枚小奖牌；
负责的教育资讯类产品成功上线，虽然目前用户量还不具规模，但也算是小有成就了，希望可以继续变得越来越好！

#+begin_morelink
[[file:2017-02-04-2016-personal-summary.org][Read More →]]
#+end_morelink

-----
* [[file:2015-12-19-centos-mongo-install.org][Mongo installed and confiure]]
#+begin_published
Saturday, December 19, 2015 at  9:54 PM CST
#+end_published
*1. 创建 /etc/yum.repos.d/mongodb-org-3.0.repo*

#+begin_example
  [mongodb-org-3.0]
  name=MongoDB Repository
  baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.0/x86_64/
  gpgcheck=0
  enabled=1
#+end_example

*2. yum安装mongo*

#+begin_src
  =sudo yum install -y mongodb-org=
#+end_src

或者 指定版本

#+begin_src
  =sudo yum install -y mongodb-org-3.0.7 mongodb-org-server-3.0.7 mongodb-org-shell-3.0.7 mongodb-org-mongos-3.0.7 mongodb-org-tools-3.0.7=
#+end_src

为了阻止以后更新，你可能需要修改/etc/yum.conf文件，添加配置：

#+begin_src
  =exclude=mongodb-org,mongodb-org-server,mongodb-org-shell,mongodb-org-mongos,mongodb-org-tools=
#+end_src

#+begin_morelink
[[file:2015-12-19-centos-mongo-install.org][Read More →]]
#+end_morelink

-----
* [[file:2015-12-19-centos-elasticsearch-install.org][Elasticsearch installed tips]]
#+begin_published
Saturday, December 19, 2015 at  9:53 PM CST
#+end_published
/1. 下载安装包/

/2. 修改config配置文件/

/3. 运行 ./bin/elasticsearch/

/4. 验证：curl 'http://localhost:9200/?pretty'/

*5. 关闭：curl -XPOST 'http://localhost:9200/_shutdown'*

/6. 安装head plugin/

Running as a plugin of ElasticSearch (this is the preferred method)

=elasticsearch/bin/plugin -install mobz/elasticsearch-head=

[[http://localhost:9200/_plugin/head/=查看是否成功安装][http://localhost:9200/_plugin/head/=查看是否成功安装]]
-----
* [[file:2015-12-19-centos-vsftpd-install.org][vsftpd installed and configure]]
#+begin_published
Saturday, December 19, 2015 at  9:53 PM CST
#+end_published
*1. yum install vsftpd*

*2. 配置/etc/vsftpd/vsftpd.conf*

配置参考如下：

#+begin_example
  anonymous_enable=NO
  local_enable=YES
  write_enable=YES
  local_umask=022
  dirmessage_enable=YES
  xferlog_enable=YES
  connect_from_port_20=YES
  ascii_upload_enable=YES
  ascii_download_enable=YES
  chroot_local_user=YES
  chroot_list_enable=YES
  chroot_list_file=/etc/vsftpd/chroot_list
  listen=YES
  pam_service_name=vsftpd
  userlist_enable=YES
  tcp_wrappers=YES
  use_localtime=YES
  allow_writeable_chroot=YES
#+end_example

#+begin_morelink
[[file:2015-12-19-centos-vsftpd-install.org][Read More →]]
#+end_morelink

-----
* [[file:2015-12-19-centos-mysql-install.org][Mysql installed and configure]]
#+begin_published
Saturday, December 19, 2015 at  9:52 PM CST
#+end_published
原来是rpm安装，检查并卸载

#+begin_example
  rpm -qa|grep -i mysql
  rpm -ev MySQL-service-5.6.25-1.el7.x86_64
  rpm -ev MySQL-client-5.6.25-1.el7.x86_64
#+end_example

原来是yum安装，检查并卸载 =rpm -qa|grep mysql=

一般输出内容如下：

#+begin_example
  mysql-community-release-el7-5.noarch
  mysql-community-client-5.7.7-0.3.rc.el7.x86_64
  mysql-community-libs-5.7.7-0.3.rc.el7.x86_64
  mysql-community-server-5.7.7-0.3.rc.el7.x86_64
  mysql-community-common-5.7.7-0.3.rc.el7.x86_64
  mysql-community-libs-compat-5.7.7-0.3.rc.el7.x86_64
#+end_example

#+begin_morelink
[[file:2015-12-19-centos-mysql-install.org][Read More →]]
#+end_morelink

-----
* [[file:2014-08-07-merge-the-project-forked-from-github.org][Merge the project forked from github]]
#+begin_published
Thursday, August  7, 2014 at  5:24 PM CST
#+end_published
Github真是一个好地方，相信很多程序员们都知道！大家在上面可能都有多多少少的个人项目。我们常常会关注自己兴趣以及xx大牛的项目，甚至于fork牛人们的项目，慢慢研究。但是牛人们的步伐，岂是偶等可以追逐的，他们可能一天=commit=很多次，这样就会导致我们刚刚=fork=的代码已经不是最新的了，那现在我们就来看下如何更新到原作者的最新代码。

#+begin_morelink
[[file:2014-08-07-merge-the-project-forked-from-github.org][Read More →]]
#+end_morelink

-----
* [[file:2014-07-23-a-note-of-programming-clojure.org][Clojure Programming]]
#+begin_published
Wednesday, July 23, 2014 at 11:02 AM CST
#+end_published
1.use 用来导入clojure.core命名空间

#+begin_example
  user>(clojure.core/use 'clojure.core)
#+end_example

2.import导入java类

#+begin_example
  user>(import '(java.io InputStream File))
  java.io.File
#+end_example

3.require引入clj到当前命名空间

#+begin_example
  user>(require 'clojure.string)
  nil
#+end_example

#+begin_morelink
[[file:2014-07-23-a-note-of-programming-clojure.org][Read More →]]
#+end_morelink

-----
* [[file:2014-07-18-a-store.org][Setting up this blog]]
#+begin_published
Friday, July 18, 2014 at  4:09 PM CST
#+end_published
*/--来源于互联网的小故事，虽然可能是某些人丰富想象力的创作，但我觉得挺有意思的，在这里做个记录/*

*=25岁毕业=*，拿一万块钱月薪

*=30岁=*，涨到一万五，期间无女盆友，吃10块钱盖饭，跟同学合租，挤2块钱地铁上下班，存钱25万

*=31岁=*，啃老找父母要了35万块钱，买了50平米老房子一处，贷款90万，20年，月供6500。

*=35岁0个月=*，认识一4分木耳，接盘玩腻的木耳结婚。

*=35岁6个月=*，生了小孩，小孩眉宇间有高富帅的痕迹

*=36岁=*，工资涨到2万，木耳要买驴牌，便宜儿子要喝进口奶粉，压力很大

*=37岁=*，木耳说，人家的儿子都读花家地，读史家胡同，你也要给咱高富帅的儿子搞个学区房，你这个死没用的东西

#+begin_morelink
[[file:2014-07-18-a-store.org][Read More →]]
#+end_morelink

-----
* [[file:2014-07-17-this-is-life.org][This is life]]
#+begin_published
Thursday, July 17, 2014 at  9:52 AM CST
#+end_published
上周经历了一次沉重的心路历程，也许是我内心不够强大，也许是每个人遇到相同的问题都会如此反应。不过总的来说是有惊无险，心也就慢慢释然了。同事们都感觉到我的变化，从一个性格相对开朗到如突然间默不做声，大家都表现出对我的关心，但我却无法告诉他们自己的想法！虽然内心比较痛苦，但却充满着温暖，慢慢在安慰着自己。

好了，上面的事情就此告一段落了。这阶段，外甥女的入学也搞定了，参加技术培训也完成了，经理人培训也结束了，工作在稳步进行中。总体来看，算是过到了一个平稳期。在工作上，我还想有更好的突破，昨天领导找我了，说今年加薪恐怕不太理想，公司在控制成本。。感觉整个部门都充满着困难和危机。今天离职的兄弟都走了7个了，却只进来两个没多少经验的新人。哎，替部门，替公司担忧！

我只能做的是，对自己的生活，工作负责，做*=最好的自己=*！

#+begin_morelink
[[file:2014-07-17-this-is-life.org][Read More →]]
#+end_morelink

-----
* [[file:2014-05-27-ji-yu-axis,-xfire,-cxfde-webserviceke-hu-duan.org][A Client of Webservice by Axis/XFire/CXF]]
#+begin_published
Tuesday, May 27, 2014 at  2:59 PM CST
#+end_published
##Axis客户端调用 webservice

#+begin_example
  URL endpointURL = new URL("http://localhost:8080/webservice/HelloService");  
              String requestText = "javalinjx"  
              Service service = new Service();  
              Call call = (Call) service.createCall();  
              call.setTargetEndpointAddress(endpointURL);  
              call.setOperationName("sayHello");  
              call.addParameter("xml", XMLType.XSD_STRING, ParameterMode.IN);  
              call.setReturnClass(String.class);  
              call.setReturnType(XMLType.XSD_STRING);// 设置返回类型  
              Object [] obj = new Object[]{ requestText };  
              String result = (String) call.invoke(obj);
#+end_example

#+begin_morelink
[[file:2014-05-27-ji-yu-axis,-xfire,-cxfde-webserviceke-hu-duan.org][Read More →]]
#+end_morelink

-----
* [[file:2014-05-25-grep-and-find.org][Grep and Find]]
#+begin_published
Sunday, May 25, 2014 at  5:54 PM CST
#+end_published
##grep ###1.从文件中查找关键词 *grep 'linux' text.txt //查找包含
linux的关键词*

#+begin_example
  [root@localhost ~]# grep 'root' /etc/group
  root:x:0:root
  bin:x:1:root,bin,daemon
#+end_example

###2.从多个文件中查找关键词

#+begin_example
  [root@localhost ~]# grep 'root' /etc/group /etc/my.cnf
  /etc/group:root:x:0:root
  /etc/my.cnf:user = root
#+end_example

###3.查找当前目录下以及下辖子目录下所有包含str字符串的文件,会列出文件名.以及该行的内容.以及行号

*-n是打印行号，-r是在子目录也要查询*

#+begin_example
  grep -n "str" -r ./
#+end_example

*用 -i 搜索的时候可以忽略大小写*

*利用 -r 来完成所有的子目录下面执行相应的查找*

*用-l是打印所有的结果*

#+begin_morelink
[[file:2014-05-25-grep-and-find.org][Read More →]]
#+end_morelink

-----
* [[file:2014-05-10-countdownlatch.org][CountDownLatch]]
#+begin_published
Saturday, May 10, 2014 at  3:29 PM CST
#+end_published
###同步工具类之闭锁-CountDownLatch

/闭锁/是一种同步工具类，可以延迟线程的进度直到其到达终止状态。闭锁的作用相当于一扇门：在闭锁到达结束状态之前，这扇门一直是关闭的，并且没有
任何线程能通过，当到达结束状态时，这扇门会打开并允许所有的线程通过。当闭锁到达结束状态后，将不会再改变状态，因此这扇门将永远保持打开状态。
闭锁可以用来确保某些活动直到其他活动都完成后才继续执行。

*=CountDownLatch=*是一种灵活的闭锁实现，可以在上述各种情况中使用，它可以使一个或多个线程等待一组事件发生。闭锁状态包括一个计数器，该计数器
被初始化为一个正数，表示需要等待的事件数量。=countDown=方法递减计数器，表示有一个事件已经发生了，而await方法等待计数器达到零，这表示所有
需要等待的事件都已经发生。如果计数器的值非零，那么=await=会一直阻塞直到计数器为零，或者等待中的线程中断，或者等待超时。

#+begin_example
  public class TestHarness {  
      public long timeTasks(int nthreads, final Runnable task) throws InterruptedException {  
          final CountDownLatch startGate = new CountDownLatch(1);  
          final CountDownLatch endGate = new CountDownLatch(nthreads);  

          for (int i = 0; i < nthreads; i++) {  
          Thread t = new Thread(){  
              @Override  
              public void run() {  
                  try{  
                      startGate.await();  
                      try{  
                          task.run();  
                      }finally {  
                          endGate.countDown();  
                      }  
                  } catch (InterruptedException ignored) {}  
              }  
          };  
          t.start();  
          }  

          long start = System.nanoTime();  
          startGate.countDown();  
          endGate.await();  
          long end = System.nanoTime();  
          return end-start;  
      }  
  }  
#+end_example

#+begin_morelink
[[file:2014-05-10-countdownlatch.org][Read More →]]
#+end_morelink

-----
* [[file:2014-04-11-a-note-of-understanding-the-jvm.org][A note of Understanding the JVM]]
#+begin_published
Friday, April 11, 2014 at  1:05 PM CST
#+end_published
-----

##java内存区域和内存溢出异常 ###运行时数据区域 * 程序计数器（Program
Counter Register） * Java虚拟机栈（Java Virtual Machine Stacks） *
本地方法栈（Native Method Stacks） * Java堆（Java Heap） *
方法区（Method Area） * 运行时常量池（Runtime Constant Pool） *
另：直接内存

-----

###程序计数器

程序计数器是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等都需要它来完成。java虚拟机的多线程切换后需要恢复到正确的执行位置都需要一个独立的程序计数器，各线程之间的计数器互不影响，独立存储，所以这类内存区域为“线程私有”的内存。
如果线程正在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。

#+begin_morelink
[[file:2014-04-11-a-note-of-understanding-the-jvm.org][Read More →]]
#+end_morelink

-----
* [[file:2014-04-09-my-first-octopress-blog.org][Setting up this blog]]
#+begin_published
Monday, March 24, 2014 at  6:19 PM CST
#+end_published
*** --Setting up this blog

:PROPERTIES:
:CUSTOM_ID: setting-up-this-blog
:END:
Apparently I'm using emacs org mode to power this
blog.Many thanks for the nice framework that save me a lot of time to
get up to speed.I probably wouldn't have decided to move my blog here in
the first place if there weren't ready-to-use solutions for lazy people
like me.

Anyway, here's the link to my old blog: http://javalinjx.iteye.com/
-----
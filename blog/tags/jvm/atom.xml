<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: jvm | 枫中畅游]]></title>
  <link href="http://davylin.github.io/blog/tags/jvm/atom.xml" rel="self"/>
  <link href="http://davylin.github.io/"/>
  <updated>2014-08-07T18:01:08+08:00</updated>
  <id>http://davylin.github.io/</id>
  <author>
    <name><![CDATA[Davy Lin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A note of Understanding the JVM]]></title>
    <link href="http://davylin.github.io/blog/a-note-of-understanding-the-jvm/"/>
    <updated>2014-04-11T13:05:48+08:00</updated>
    <id>http://davylin.github.io/blog/a-note-of-understanding-the-jvm</id>
    <content type="html"><![CDATA[<hr />

<h2>java内存区域和内存溢出异常</h2>

<h3>运行时数据区域</h3>

<ul>
<li>程序计数器（Program Counter Register）</li>
<li>Java虚拟机栈（Java Virtual Machine Stacks）</li>
<li>本地方法栈（Native Method Stacks）</li>
<li>Java堆（Java Heap）</li>
<li>方法区（Method Area）

<ul>
<li>运行时常量池（Runtime Constant Pool）</li>
</ul>
</li>
<li>另：直接内存</li>
</ul>


<hr />

<h3>程序计数器</h3>

<p>程序计数器是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等都需要它来完成。java虚拟机的多线程切换后需要恢复到正确的执行位置都需要一个独立的程序计数器，各线程之间的计数器互不影响，独立存储，所以这类内存区域为“线程私有”的内存。
如果线程正在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>

<h3>Java虚拟机栈</h3>

<p>与程序计数器一样，java虚拟机栈也是线程私有的，它的生命周期与线程相同。它描述的是java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧(Stack Frame)用于存储局部变量表、操作栈、动态链接、方法出口等信息。
经常有人把java内存区分为堆内存(heap)和栈内存(stack)，这种分法比较粗糙.而所指的"栈"就是现在讲的虚拟机栈，或者说是虚拟机栈中的局部变量表部分。
局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象超始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。
在java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展，当扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。</p>

<h3>本地方法栈</h3>

<p>本地方法栈与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。同理，本地方法栈也会招聘StackOverflowError和OutOfMemoryError异常。</p>

<h3>Java堆</h3>

<p>java堆是java虚拟机所管理的内存中最大的一块。java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。
所有的对象实例以及数据都要在堆上分配，但是随着jit编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。
java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”（Garbage Collected Heap）.如果从内存回收的角度看，现在收集器基本都是采用分代收集算法，所以java堆中还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。当然Java堆中的内存分配不够时，将会抛出常见的OutOfMemoryError异常。</p>

<h3>方法区</h3>

<p>方法区(Method Area)与java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目前应该是与java堆区分开来。
根据java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</p>

<ul>
<li><p>运行时常量池</p>

<p>  运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant pool Table）,用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。
运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，java语言并不要求常量一定只能在编译期产生，也就是并非预置入class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern()方法。自然，常量池无法申请到内存时也会抛出OutOfMemoryError异常。</p></li>
</ul>


<h3>对象访问</h3>

<h4>主流的访问有两种：使用句柄和直接指针</h4>

<p>1.如果使用句柄访问方式，java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息。</p>

<p>2.如果使用直接指针访问方式，java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference中直接存储的就是对象地址。</p>
]]></content>
  </entry>
  
</feed>
